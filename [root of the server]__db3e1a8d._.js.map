{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lucas/Downloads/EvoGenAlg%20%281%29/frontend/src/app/api/analyze/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\n\r\n// Define the expected analysis types (mirroring backend Enum)\r\nenum AnalysisType {\r\n    EXPLAIN = \"explain\",\r\n    FIND_BUGS = \"find_bugs\",\r\n    SUGGEST_IMPROVEMENTS = \"suggest_improvements\",\r\n}\r\n\r\n// Define the expected request body structure from the frontend\r\ninterface AnalyzeRequestBody {\r\n  code_snippet: string;\r\n  analysis_type: AnalysisType;\r\n}\r\n\r\n// Define the expected backend response structure (mirroring backend)\r\ninterface BackendAnalysisResponse {\r\n    analysis_type: AnalysisType;\r\n    analysis_result: string;\r\n}\r\n\r\ninterface ErrorResponse {\r\n    error: string;\r\n}\r\n\r\nexport async function POST(req: NextRequest): Promise<NextResponse<BackendAnalysisResponse | ErrorResponse>> {\r\n  try {\r\n    // Ensure the request body is valid JSON\r\n    const requestBody: AnalyzeRequestBody = await req.json();\r\n\r\n    const { code_snippet, analysis_type } = requestBody; // Extract required fields\r\n\r\n    // Basic validation\r\n    if (!code_snippet || !analysis_type) {\r\n        return NextResponse.json({ error: 'Missing required fields: code_snippet and analysis_type' }, { status: 400 });\r\n    }\r\n    if (!Object.values(AnalysisType).includes(analysis_type)) {\r\n         return NextResponse.json({ error: 'Invalid analysis_type provided.' }, { status: 400 });\r\n    }\r\n\r\n    // Prepare the body for the backend request\r\n    const backendRequestBody = {\r\n        code_snippet,\r\n        analysis_type,\r\n     };\r\n\r\n    // Use environment variable or default for backend URL\r\n    const backendUrl = process.env.BACKEND_API_URL ? `${process.env.BACKEND_API_URL.replace(/\\/$/, '')}/analyze_code` : 'http://localhost:8000/analyze_code';\r\n\r\n    console.log(`Forwarding code analysis request to backend: ${backendUrl}`);\r\n\r\n    const backendResponse = await fetch(backendUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n      },\r\n      body: JSON.stringify(backendRequestBody),\r\n    });\r\n\r\n    console.log(`Backend analysis response status: ${backendResponse.status}`);\r\n\r\n    if (!backendResponse.ok) {\r\n      const errorText = await backendResponse.text();\r\n      console.error(`Backend analysis request failed: ${backendResponse.status} - ${errorText}`);\r\n      throw new Error(`Backend request failed with status ${backendResponse.status}: ${errorText}`);\r\n    }\r\n\r\n    const data: BackendAnalysisResponse = await backendResponse.json();\r\n    return NextResponse.json(data, { status: 200 });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error in /api/analyze:', error);\r\n    let errorMessage = 'Failed to analyze code due to an internal server error.';\r\n    if (error instanceof Error) {\r\n        errorMessage = error.message;\r\n    }\r\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,8DAA8D;AAC9D,IAAA,AAAK,sCAAA;;;;WAAA;EAAA;AAsBE,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,wCAAwC;QACxC,MAAM,cAAkC,MAAM,IAAI,IAAI;QAEtD,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,aAAa,0BAA0B;QAE/E,mBAAmB;QACnB,IAAI,CAAC,gBAAgB,CAAC,eAAe;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0D,GAAG;gBAAE,QAAQ;YAAI;QACjH;QACA,IAAI,CAAC,OAAO,MAAM,CAAC,cAAc,QAAQ,CAAC,gBAAgB;YACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QAC1F;QAEA,2CAA2C;QAC3C,MAAM,qBAAqB;YACvB;YACA;QACH;QAED,sDAAsD;QACtD,MAAM,aAAa,QAAQ,GAAG,CAAC,eAAe,GAAG,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,IAAI,aAAa,CAAC,GAAG;QAEpH,QAAQ,GAAG,CAAC,CAAC,6CAA6C,EAAE,YAAY;QAExE,MAAM,kBAAkB,MAAM,MAAM,YAAY;YAC9C,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,UAAU;YACZ;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,gBAAgB,MAAM,EAAE;QAEzE,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,YAAY,MAAM,gBAAgB,IAAI;YAC5C,QAAQ,KAAK,CAAC,CAAC,iCAAiC,EAAE,gBAAgB,MAAM,CAAC,GAAG,EAAE,WAAW;YACzF,MAAM,IAAI,MAAM,CAAC,mCAAmC,EAAE,gBAAgB,MAAM,CAAC,EAAE,EAAE,WAAW;QAC9F;QAEA,MAAM,OAAgC,MAAM,gBAAgB,IAAI;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAE/C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,0BAA0B;QACxC,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YACxB,eAAe,MAAM,OAAO;QAChC;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF","debugId":null}}]
}